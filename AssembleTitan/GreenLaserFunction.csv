//********************************GREEN LASER FUNCTION*****************************************
// This function will update the GREEN MAN Laser
// If the laser exist, then it will update in the direction it is currently travelling.
// If the laser does not exist, then this function will generate a new laser
// PARAMETERS:						
// LOCAL VARIABLES:		r1 - glyph INDEX - Loaded from glyph MEMORY location calculated from r3, or set by global constants
//						r5 - glyph MEMORY location of position to MOVE INTO
//						r6 - glyph INDEX value of position to MOVE INTO
//						r30 - temporary storage of Return Address Register
// GLOBAL VARIABLES:	r9 - glyph LOCATION of GREEN MAN LASER
//						r13 - GREEN MAN glyph LOCATION
//						r17 - GREEN MAN CONTROLLER value
//						RightGREENLASER - glyph INDEX value of GREEN MAN LASER RIGHT
//						LeftGREENLASER - glyph INDEX value of GREEN MAN LASER LEFT
// RETURN VARIABLES:	r24 - return register with updated glyph LOCATION of laser

greenLaser:
addi,r30,r31,0,					//Store the return address

//CHECK IF GREEN MAN EVEN EXIST
//ld,r6,r13,VGA,				//Glyph INDEX value of current glyph MEMORY location
//cmpi,x,r6,giGREENMAN,				//Compare if the INDEX is a background (means player has been terminated)
//bne,greenLaserEnd:,			//If the player's glyph INDEX is a background glyph, then branch to endMovement
//addi,r13,r0,0,				//Set the BLUE MAN glyph LOCATION to zero
//j,blueLaserEnd:,			//Jump to the end of the function

//Check if the laser exist
greenLaserExist:
cmpi,x,r9,0,					//Check if a laser exist - if laser exist, it will be different from 0
beq,checkALaserGREEN:,			//If the laser does not exist, then check for fired laser

//If laser exist, then check if it was a right or left laser
//For the GREEN MAN LASER, we need to check RightGREENLASER and LeftGREENLASER
ld,r1,r9,VGA,					//Load the glyph INDEX value of the current GREEN MAN LASER glyph MEMORY location
cmpi,x,r1,LeftGREENLASER,		//Check if the glyph INDEX is the RIGHT laser
bne,greenUpdateRightLaser:,		//If the glyph INDEX is the RIGHT laser, then update the right

//*****UPDATE GREEN MAN LEFT LASER*******
//cmpi,x,r1,LeftGREENLASER,		//If it's not a right laser, double check that it's a left laser
//bne,greenLaserEnd:,			//If it's not a LEFT laser, branch to the end
// PARAMETERS:			r1 - glyph INDEX
//						r2 - glyph LOCATION of laser
// RETURN VARIABLES:	r23 - return register with updated glyph LOCATION of laser	
addi,r1,r0,LeftGREENLASER,		//Put the glyph INDEX of the GREEN MAN LASER RIGHT into the argument register r1
addi,r2,r9,0,					//Put the glyph LOCATION of the GREEN MAN LASER into the argument register r2
jal,updateLeftLaser:,			//If it is a LEFT laser, jump and link to the Update Left Laser Function
								//return register r23 contains the updated glyph LOCATION
addi,r9,r23,0,					//Update the glyph LOCATION of the GREEN MAN LASER
j,greenLaserEnd:,				//Jump to the end after updating the left laser

//*****UPDATE GREEN MAN RIGHT LASER*******
greenUpdateRightLaser:
// PARAMETERS:			r1 - glyph INDEX
//						r2 - glyph LOCATION of laser
// RETURN VARIABLES:	r23 - return register with updated glyph LOCATION of laser	
addi,r1,r0,RightGREENLASER,		//Put the glyph INDEX of the GREEN MAN LASER RIGHT into the argument register r1
addi,r2,r9,0,					//Put the glyph LOCATION of the GREEN MAN LASER into the argument register r2
jal,updateRightLaser:,			//Jump and link to the Update Right Laser Function
								//return register r23 contains the updated glyph LOCATION
addi,r9,r23,0,					//Update the glyph LOCATION of the GREEN MAN LASER
j,greenLaserEnd:,				//Jump to the end after updating the right laser

//******GENERATE NEW LASER**********
//If the laser doesn't exist, generate a new laser
//Check if button A was pressed for RIGHT laser
checkALaserGREEN:
andi,r6,r17,128,				//Get the right laser value - r6 doesn't follow convention here, but will in a few lines
cmpi,x,r6,128,					//Check if laser pressed is for direction RIGHT
bne,checkBLaserGREEN:,			//Check B laser if fails
//Check to see if the position to the right of the right arm of the character is a valid position
addi,r5,r13,162,				//Check location next to the right arm (162 glyph locations away from current glyph)
addi,r5,r5,VGA,					//Glyph MEMORY location of glyph to check
ld,r6,r5,0,						//Load the glyph INDEX of the glyph MEMORY location being checked
cmpi,x,r6,0,					//Check if the INDEX is the background glyph (index 0)
bne,greenLaserEnd:,				//Branch to the end of the function if invalid position - no need to update r9 because laser shouldn't exist
//if RIGHT movement is valid, generate the new laser
addi,r1,r0,RightGREENLASER,		//get the glyph INDEX for the GREEN MAN LASER RIGHT
str,r1,r5,0,					//Store the glyph INDEX of the laser into the valid position
subi,r9,r5,VGA,					//update the glyph LOCATION of the GREEN MAN LASER - this is the created laser
j,greenLaserEnd:,				//After creating the glyph, jump to the end of the function

//Check if button B was pressed for LEFT laser
checkBLaserGREEN:
andi,r6,r17,64,					//Get the left laser value - again, r6 doesn't follow convention here
cmpi,x,r6,64,					//Check if laser pressed is for direction Left
bne,greenLaserEnd:,				//Jump to end of function if fails
//Check to see if position to the left of left arm of the character is a valid position
addi,r5,r13,159,				//Check location next to the left arm (159 glyph locations away from glyph LOCATION of GREEN MAN)
addi,r5,r5,VGA,					//Glyph MEMORY location of glyph to check
ld,r6,r5,0,						//Load the glyph INDEX of the glyph MEMORY location being checked
cmpi,x,r6,0,					//Check if the INDEX is the background glyph (index 0)
bne,greenLaserEnd:,				//Branch to the end of the function if invalid position - no need to update r9 because laser shouldn't exist
//if LEFT movement is valid, generate the new laser
addi,r1,r0,LeftGREENLASER,		//get the glyph INDEX for the GREEN MAN LASER LEFT
str,r1,r5,0,					//Store the glyph INDEX of the laser into the valid position
subi,r9,r5,VGA,					//update the glyph LOCATION of the GREEN MAN LASER - this is the created laser

greenLaserEnd:
addi,r31,r30,0,					//Restore the return address
jra,							//jump to the Return Address of where the function was called