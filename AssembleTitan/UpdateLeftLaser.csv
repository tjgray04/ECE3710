//*****************************UPDATE LEFT LASER FUNCTION***********************************
// This function will update lasers travelling to the left
// PARAMETERS:			r1 - glyph INDEX
//						r2 - glyph LOCATION of laser
// LOCAL VARIABLES:		r3 - glyph MEMORY location of position to MOVE INTO - one position to left
//						r4 - glyph INDEX value of position to MOVE INTO
//						r29 - temporary storage of Return Address Register
// GLOBAL VARIABLES:	giWALL - glyph INDEX value of WALL
//						giBLUEMAN - glyph INDEX value of BLUE MAN
//						giREDMAN - glyph INDEX value of RED MAN
//						giGREENMAN - glyph INDEX value of GREEN MAN
//						giWHITEMAN - glyph INDEX value of WHITE MAN
// RETURN VARIABLES:	r23 - return register with updated glyph LOCATION of laser	

updateLeftLaser:,//
addi,r29,r31,0,					//Store the return address

str,r0,r2,VGA,					//Store the background INDEX (index 0) into the glyph MEMORY location of the laser
addi,r3,r2,-1,					//Check location next to the laser (1 location to the left)
addi,r3,r3,VGA,					//Glyph MEMORY location of glyph to check
ld,r4,r3,0,						//Load the glyph INDEX of the glyph MEMORY location being checked
cmpi,x,r4,0,					//Check if index is the background glyph (index )
bne,checkLeftWall:,				//If false, the position to move into is not valid and we must check if the invalid position is a character
str,r1,r3,0,					//Store the glyph INDEX of laser into the glyph MEMORY location that was checked
subi,r2,r3,VGA,					//Update the glyph LOCATION of the laser
j,endLeftLaser:,				//After updating, jump to the end of the function

//Check if the laser hits a wall - if it does, terminate the laser
checkLeftWall:,//
cmpi,x,r4,giWALL,				//Check if the glyph INDEX of the glyph MEMORY location being checked is the WALL
beq,resetLeftLaser:,			//If it is the WALL, just jump to resetLeftLaser

//4 Checks need to be done for the entire RIGHT side of a character - for all 4 characters
//This is because we have to know where the laser hits the character
//Note, at this point we don't need to worry about what r1 is
addi,r1,r0,giBLUEMAN,//
addi,r1,r1,1,					//Increment to the index value of the BLUE MAN top RIGHT head
cmp,x,r4,r1,					//Check if the glyph INDEX value is the BLUE MAN top RIGHT head
beq,terminateRightHeadTop:,		//If true, then reset the laser and exit the function
addi,r1,r0,giREDMAN,//
addi,r1,r1,1,					//Increment to the index value of the RED MAN top RIGHT head
cmp,x,r4,r1,					//Check if the glyph INDEX value is the RED MAN top left head
beq,terminateRightHeadTop:,		//If true, then reset the laser and exit the function
addi,r1,r0,giGREENMAN,//
addi,r1,r1,1,					//Increment to the index value of the RED MAN top RIGHT head
cmp,x,r4,r1,					//Check if the glyph INDEX value is the GREEN MAN top left head
beq,terminateRightHeadTop:,		//If true, then reset the laser and exit the function
addi,r1,r0,giWHITEMAN,//
addi,r1,r1,1,					//Increment to the index value of the RED MAN top RIGHT head
cmp,x,r4,r1,					//Check if the glyph INDEX value is the WHITE MAN top left head
beq,terminateRightHeadTop:,		//If true, then reset the laser and exit the function	

//If not the TOP RIGHT HEAD, then check the BOTTOM RIGHT HEAD
addi,r1,r0,giBLUEMAN,//
addi,r1,r1,3,					//increment to the index value of the BLUE MAN bottom left head
cmp,x,r4,r1,					//Check if the glyph INDEX value is the BLUE MAN bottom left head
beq,terminateRightHeadBottom:,	//If true, then reset the laser and exit the function	
addi,r1,r0,giREDMAN,//
addi,r1,r1,3,					//increment to the index value of the RED MAN bottom left head
cmp,x,r4,r1,					//Check if the glyph INDEX value is the RED MAN bottom left head
beq,terminateRightHeadBottom:,	//If true, then reset the laser and exit the function
addi,r1,r0,giGREENMAN,//
addi,r1,r1,3,					//increment to the index value of the GREEN MAN bottom left head
cmp,x,r4,r1,					//Check if the glyph INDEX value is the GREEN MAN bottom left head
beq,terminateRightHeadBottom:,	//If true, then reset the laser and exit the function
addi,r1,r0,giWHITEMAN,//
addi,r1,r1,3,					//increment to the index value of the WHITE MAN bottom left head	
cmp,x,r4,r1,					//Check if the glyph INDEX value is the WHITE MAN bottom left head
beq,terminateRightHeadBottom:,	//If true, then reset the laser and exit the function	

//If not the BOTTOM RIGHT HEAD, then check the RIGHT ARM
addi,r1,r0,giBLUEMAN,//
addi,r1,r1,5,					//increment to the index value of the BLUE MAN left leg
cmp,x,r4,r1,					//Check if the glyph INDEX value is the BLUE MAN left leg
beq,terminateRightArm:,			//If true, then reset the laser and exit the function	
addi,r1,r0,giREDMAN,
addi,r1,r1,5,					//increment to the index value of the RED MAN left leg
cmp,x,r4,r1,					//Check if the glyph INDEX value is the RED MAN left leg
beq,terminateRightArm:,			//If true, then reset the laser and exit the function
addi,r1,r0,giGREENMAN,
addi,r1,r1,5,					//increment to the index value of the GREEN MAN left leg
cmp,x,r4,r1,					//Check if the glyph INDEX value is the GREEN MAN left leg
beq,terminateRightArm:,			//If true, then reset the laser and exit the function
addi,r1,r0,giWHITEMAN,
addi,r1,r1,5,					//increment to the index value of the WHITE MAN left leg	
cmp,x,r4,r1,					//Check if the glyph INDEX value is the WHITE MAN left leg
beq,terminateRightArm:,			//If true, then reset the laser and exit the function

//If not the RIGHT ARM, then check the RIGHT LEG
addi,r1,r0,giBLUEMAN,//
addi,r1,r1,7,					//increment to the index value of the BLUE MAN left arm
cmp,x,r4,r1,					//Check if the glyph INDEX value is the BLUE MAN left arm
beq,terminateRightLeg:,			//If true, then reset the laser and exit the function	
addi,r1,r0,giREDMAN,//
addi,r1,r1,7,					//increment to the index value of the RED MAN left arm
cmp,x,r4,r1,					//Check if the glyph INDEX value is the RED MAN left arm
beq,terminateRightLeg:,			//If true, then reset the laser and exit the function
addi,r1,r0,giGREENMAN,//
addi,r1,r1,7,					//increment to the index value of the GREEN MAN left arm
cmp,x,r4,r1,					//Check if the glyph INDEX value is the GREEN MAN left arm
beq,terminateRightLeg:,			//If true, then reset the laser and exit the function
addi,r1,r0,giWHITEMAN,//
addi,r1,r1,7,					//increment to the index value of the WHITE MAN left arm	
cmp,x,r4,r1,					//Check if the glyph INDEX value is the WHITE MAN left arm
beq,terminateRightLeg:,			//If true, then reset the laser and exit the function

j,resetLeftLaser:,				//Reset the LEFT laser and end the function

terminateRightHeadTop:,//
// PARAMETERS:			r3 - glyph MEMORY location
//If the TOP RIGHT HEAD was hit, make the parameter the TOP LEFT HEAD
//r3 currently contains the value of the TOP RIGHT HEAD
addi,r3,r3,-1,					//The top left head is 1 glyph MEMORY location away from r3
jal,terminate:,					//Jump and link to the terminate function
j,resetLeftLaser:,				//Jump to the end of the function

terminateRightHeadBottom:,//
// PARAMETERS:			r3 - glyph MEMORY location
//If the BOTTOM RIGHT HEAD was hit, make the parameter the TOP LEFT HEAD
//r3 currently contains the value of the BOTTOM RIGHT HEAD
addi,r3,r3,-81,					//The top left head is 1 glyph MEMORY location away from r3
jal,terminate:,					//Jump and link to the terminate function
j,resetLeftLaser:,				//Jump to the end of the function

terminateRightArm:,//
// PARAMETERS:			r3 - glyph MEMORY location
//If the RIGHT ARM was hit, make the parameter the TOP LEFT HEAD
//r3 currently contains the value of the RIGHT ARM
addi,r3,r3,-161,				//The top left head is 1 glyph MEMORY location away from r3
jal,terminate:,					//Jump and link to the terminate function
j,resetLeftLaser:,				//Jump to the end of the function

terminateRightLeg:,//
// PARAMETERS:			r3 - glyph MEMORY location
//If the RIGHT LEG was hit, make the parameter the TOP LEFT HEAD
//r3 currently contains the value of the RIGHT LEG
addi,r3,r3,-241,				//The top left head is 1 glyph MEMORY location away from r3
jal,terminate:,					//Jump and link to the terminate function
j,resetLeftLaser:,				//Jump to the end of the function

resetLeftLaser:,//
addi,r2,r0,0,					//Reset laser glyph LOCATION to zero - means the laser doesn't exist any more

endLeftLaser:,//
//return the updated glyph LOCATION - return register 23
addi,r23,r2,0,					//Store the updated position into the return register
addi,r31,r29,0,					//Restore the Return Address
jra,							//jump to the Return Address of where the function was called	
